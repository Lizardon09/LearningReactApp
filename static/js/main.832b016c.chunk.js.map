{"version":3,"sources":["webpack:///./src/components/Columns.js?34c1","webpack:///./src/components/Table.js?b5e1","webpack:///./src/components/State.js?153a","webpack:///./src/components/Display.js?d482","webpack:///./src/basic-tutorials/component-fragmenting/ComponentFragmenting.js?9d5b","logo.svg","components/State.js","components/Display.js","components/Columns.js","components/Table.js","components/helpers/CodeSnippet/CodeSnippet.style.js","components/helpers/CodeSnippet/CodeEditor.js","components/helpers/CodeSnippet/CodeSnippet.js","components/helpers/CodeSnippet/CodeStrings.js","basic-tutorials/component-fragmenting/ComponentFragmenting.js","App.js","reportWebVitals.js","index.js"],"names":["State","useState","counter","setCounter","onClick","Display","Columns","Fragment","Table","colSpan","Pre","styled","div","pre","Line","LineNo","span","LineContent","styles","root","boxSizing","fontFamily","theme","plain","CodeEditor","state","code","props","codestring","onValueChange","setState","highlight","defaultProps","language","className","style","tokens","getLineProps","getTokenProps","map","line","i","key","token","value","this","padding","Component","CodeSnippet","trim","withlinenumbers","editor","LineNumberSnippet","BasicSnippet","CodeStrings","components","require","default","basic_tutorials","ComponentFragmenting","ParentWrappingDiv","NoParentWrappingDiv","NoParentWrappingDiv2","ChildComponentCodeReveals","showStateComponentCode","toggleStateComponentJS","showDisplayComponentCode","toggleDisplayComponentJS","implimentationSectionColCount","changeImplimentationSectionColCount","changeColCount","StateCodeString","DisplayCodeString","ToggleButtonGroup","type","ToggleButton","id","onChange","variant","Container","Row","md","Collapse","in","unmountOnExit","mountOnEnter","Col","TableDisplayCodeString","ColumnsCodeString","ParentWrappingDivCode","reactElementToJSXString","useFragmentShortSyntax","NoParentWrappingDivCode","NoParentWrappingDiv2Code","TableDisplayRender","jsBeautifier","html","ReactDOMServer","renderToStaticMarkup","console","log","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.832b016c.chunk.js","sourcesContent":["export default \"import React from 'react';\\r\\n\\r\\nfunction Columns() {\\r\\n    return(\\r\\n        <React.Fragment>\\r\\n            <td>Columns 1</td>\\r\\n            <td>Columns 2</td>\\r\\n        </React.Fragment>\\r\\n    );\\r\\n}\\r\\n\\r\\nexport default Columns;\";","export default \"import React from 'react';\\r\\nimport Columns from './Columns';\\r\\n\\r\\nfunction Table() {\\r\\n    return(\\r\\n        <table>\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <td colSpan=\\\"2\\\">Table</td>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <Columns/>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    );\\r\\n}\\r\\n\\r\\nexport default Table;\";","export default \"import React, { useState } from 'react';\\r\\n\\r\\nfunction State() {\\r\\n    const initialValue = 5;\\r\\n    const increment = 5;\\r\\n\\r\\n    const [counter, setCounter] = useState(initialValue);\\r\\n\\r\\n    const handleClick = () => setCounter(counter + increment);\\r\\n\\r\\n    return (\\r\\n        <button onClick={handleClick}>\\r\\n            {counter}\\r\\n        </button>\\r\\n    );\\r\\n}\\r\\n\\r\\nexport default State;\";","export default \"import React from 'react';\\r\\n\\r\\nfunction Display() {\\r\\n    return (\\r\\n        <div>...display component...</div>\\r\\n    )\\r\\n}\\r\\n\\r\\nexport default Display;\";","export default \"import React, {useState} from 'react';\\r\\nimport ReactDOMServer from 'react-dom/server';\\r\\nimport {State, Display, Table, CodeSnippet, CodeStrings} from '../../components/index';\\r\\nimport './ComponentFragmenting.scss';\\r\\nimport {Container, Row, Col, ToggleButtonGroup, ToggleButton, Collapse} from 'react-bootstrap';\\r\\nimport reactElementToJSXString from 'react-element-to-jsx-string';\\r\\nimport jsBeautifier from 'js-beautify';\\r\\n\\r\\nfunction ComponentFragmenting() {\\r\\n\\r\\n    const TableDisplayCodeString = CodeStrings.components.Table;\\r\\n    const ColumnsCodeString = CodeStrings.components.Columns;\\r\\n\\r\\n    const ParentWrappingDivCode = reactElementToJSXString(ParentWrappingDiv(), {useFragmentShortSyntax: false});\\r\\n    const NoParentWrappingDivCode = reactElementToJSXString(NoParentWrappingDiv(), {useFragmentShortSyntax: false});\\r\\n    const NoParentWrappingDiv2Code = reactElementToJSXString(NoParentWrappingDiv2());\\r\\n    const TableDisplayRender = jsBeautifier.html(ReactDOMServer.renderToStaticMarkup(<Table/>));\\r\\n\\r\\n    console.log(ParentWrappingDivCode);\\r\\n\\r\\n    return (\\r\\n        <div className=\\\"ComponentFragmenting\\\">\\r\\n            <header className=\\\"ComponentFragmenting-header\\\">\\r\\n\\r\\n                {ChildComponentCodeReveals()}\\r\\n\\r\\n                <br></br>\\r\\n\\r\\n                <h3>Component Fragmenting</h3>\\r\\n                <p>Proccess in which you dictatce whether multiple components should have a parent wrapping element or not whilst still having an implicit wrapping</p>\\r\\n                \\r\\n                <Container>\\r\\n                    <Row className=\\\"ImplimentationSection\\\" md={2}>\\r\\n                        <Col>{ParentWrappingDiv()}</Col>\\r\\n                        <Col>\\r\\n                            <Container className=\\\"ImplimentationCodeSection\\\">\\r\\n                                <CodeSnippet codestring={ParentWrappingDivCode} withlinenumbers={true}/>\\r\\n                            </Container>\\r\\n                        </Col>\\r\\n                    </Row>\\r\\n                </Container>\\r\\n\\r\\n                <Container>\\r\\n                    <Row className=\\\"ImplimentationSection\\\" md={2}>\\r\\n                        <Col>{NoParentWrappingDiv()}</Col>\\r\\n                        <Col>\\r\\n                            <Container className=\\\"ImplimentationCodeSection\\\">\\r\\n                                <CodeSnippet codestring={NoParentWrappingDivCode} withlinenumbers={true}/>\\r\\n                            </Container>\\r\\n                        </Col>\\r\\n                    </Row>\\r\\n                </Container>\\r\\n\\r\\n                <Container>\\r\\n                    <Row className=\\\"ImplimentationSection\\\" md={2}>\\r\\n                        <Col>{NoParentWrappingDiv2()}</Col>\\r\\n                        <Col>\\r\\n                            <Container className=\\\"ImplimentationCodeSection\\\">\\r\\n                                <CodeSnippet codestring={NoParentWrappingDiv2Code} withlinenumbers={true}/>\\r\\n                            </Container>\\r\\n                        </Col>\\r\\n                    </Row>\\r\\n                </Container>\\r\\n\\r\\n                <br></br>\\r\\n                <p>Fragments let you group a list of children without adding extra nodes to the DOM.</p>\\r\\n\\r\\n                <Container>\\r\\n                    <Row className=\\\"ImplimentationSection\\\" md={2}>\\r\\n                        <Col>\\r\\n                            {TableDisplay()}\\r\\n                            <br></br>\\r\\n                            <p>Which will render on the DOM as...</p>\\r\\n                            <CodeSnippet codestring={TableDisplayRender}/>\\r\\n                        </Col>\\r\\n                        <Col>\\r\\n                            <Container className=\\\"ImplimentationCodeSection\\\">\\r\\n                                <CodeSnippet codestring={TableDisplayCodeString} withlinenumbers={true}/>\\r\\n                                <CodeSnippet codestring={ColumnsCodeString} withlinenumbers={true}/>\\r\\n                            </Container>\\r\\n                        </Col>\\r\\n                    </Row>\\r\\n                </Container>\\r\\n\\r\\n            </header>\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nfunction ParentWrappingDiv() {\\r\\n    return(\\r\\n        <div className=\\\"ParentWrapping\\\">\\r\\n            <h3>Parent Wrapping Div</h3>\\r\\n            <State/>\\r\\n            <Display/>\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nfunction NoParentWrappingDiv() {\\r\\n    return(\\r\\n        <React.Fragment>\\r\\n            <h3>No Parent Wrapping Div (Componnet Fragmenting)</h3>\\r\\n            <State/>\\r\\n            <Display/>\\r\\n        </React.Fragment>\\r\\n    );\\r\\n}\\r\\n\\r\\nfunction NoParentWrappingDiv2() {\\r\\n    return(\\r\\n        <>\\r\\n            <h3>No Parent Wrapping Div (Componnet Fragmenting) WITH JSX shortcut</h3>\\r\\n            <State/>\\r\\n            <Display/>\\r\\n        </>\\r\\n    );\\r\\n}\\r\\n\\r\\nfunction TableDisplay() {\\r\\n    return(\\r\\n        <div className=\\\"tableChild\\\">\\r\\n            <p>\\r\\n                For example: You can split a Table and it's Columns into seperate components, and the columns can be fragmented together\\r\\n                 - such that the final rendered table will not have an uneccessary extra div wrapping the columns within the table.\\r\\n            </p>\\r\\n            <br></br>\\r\\n            <Table/>\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nfunction ChildComponentCodeReveals() {\\r\\n\\r\\n    const [showStateComponentCode, toggleStateComponentJS] = useState(false);\\r\\n    const [showDisplayComponentCode, toggleDisplayComponentJS] = useState(false);\\r\\n    const [implimentationSectionColCount, changeImplimentationSectionColCount] = useState(0);\\r\\n\\r\\n    const changeColCount = (value) => { value ? \\r\\n        changeImplimentationSectionColCount(implimentationSectionColCount + 1) : \\r\\n        changeImplimentationSectionColCount(implimentationSectionColCount - 1)\\r\\n    }\\r\\n    \\r\\n    const StateComponentJS = () => {\\r\\n        toggleStateComponentJS(!showStateComponentCode);\\r\\n        changeColCount(!showStateComponentCode);\\r\\n    };\\r\\n\\r\\n    const DisplayComponentJS = () =>  {\\r\\n        toggleDisplayComponentJS(!showDisplayComponentCode);\\r\\n        changeColCount(!showDisplayComponentCode);\\r\\n    };\\r\\n\\r\\n\\r\\n    const StateCodeString = CodeStrings.components.State;\\r\\n    const DisplayCodeString = CodeStrings.components.Display;\\r\\n\\r\\n    const stateCompnentString = \\\"<State/>\\\"\\r\\n    const displayComponentString = \\\"<Display/>\\\"\\r\\n\\r\\n    return(\\r\\n        <div className=\\\"childComponentsCode\\\">\\r\\n            <ToggleButtonGroup type=\\\"checkbox\\\" className=\\\"mb-2\\\">\\r\\n                <ToggleButton type=\\\"checkbox\\\" id=\\\"state-check\\\" value={1} onChange={StateComponentJS} variant=\\\"success\\\">\\r\\n                    {stateCompnentString}\\r\\n                </ToggleButton>\\r\\n                <ToggleButton type=\\\"checkbox\\\" id=\\\"display-check\\\" value={2} onChange={DisplayComponentJS} variant=\\\"warning\\\">\\r\\n                    {displayComponentString}\\r\\n                </ToggleButton>\\r\\n            </ToggleButtonGroup>\\r\\n\\r\\n            <Container>\\r\\n                <Row className=\\\"ImplimentationSection\\\" md={implimentationSectionColCount}>\\r\\n                    <Collapse in={showStateComponentCode} unmountOnExit={true} mountOnEnter={true}>\\r\\n                        <Col><CodeSnippet codestring={StateCodeString} withlinenumbers={true}/></Col>\\r\\n                    </Collapse>\\r\\n                    <Collapse in={showDisplayComponentCode} unmountOnExit={true} mountOnEnter={true}>\\r\\n                        <Col><CodeSnippet codestring={DisplayCodeString} withlinenumbers={true}/></Col>\\r\\n                    </Collapse>\\r\\n                </Row>\\r\\n            </Container>\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nexport default ComponentFragmenting;\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\n\r\nfunction State() {\r\n    const initialValue = 5;\r\n    const increment = 5;\r\n\r\n    const [counter, setCounter] = useState(initialValue);\r\n\r\n    const handleClick = () => setCounter(counter + increment);\r\n\r\n    return (\r\n        <button onClick={handleClick}>\r\n            {counter}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default State;","import React from 'react';\r\n\r\nfunction Display() {\r\n    return (\r\n        <div>...display component...</div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nfunction Columns() {\r\n    return(\r\n        <React.Fragment>\r\n            <td>Columns 1</td>\r\n            <td>Columns 2</td>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Columns;","import React from 'react';\r\nimport Columns from './Columns';\r\n\r\nfunction Table() {\r\n    return(\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td colSpan=\"2\">Table</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <Columns/>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  font-family: sans-serif;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Pre = styled.pre`\r\n  text-align: left;\r\n  margin: 1em 0;\r\n  padding: 0.5em;\r\n  overflow: scroll;\r\n\r\n  & .token-line {\r\n    line-height: 1.3em;\r\n    height: 1.3em;\r\n  }\r\n`;\r\n\r\nexport const Line = styled.div`\r\n  display: table-row;\r\n`;\r\n\r\nexport const LineNo = styled.span`\r\n  display: table-cell;\r\n  text-align: right;\r\n  padding-right: 1em;\r\n  user-select: none;\r\n  opacity: 0.5;\r\n`;\r\n\r\nexport const LineContent = styled.span`\r\n  display: table-cell;\r\n`;","import React, { Fragment, Component } from 'react'\r\n\r\nimport Editor from 'react-simple-code-editor'\r\nimport Highlight, { defaultProps } from 'prism-react-renderer'\r\nimport theme from 'prism-react-renderer/themes/nightOwl'\r\n\r\nconst styles = {\r\n    root: {\r\n      boxSizing: 'border-box',\r\n      fontFamily: '\"Dank Mono\", \"Fira Code\", monospace',\r\n      ...theme.plain\r\n    }\r\n  }\r\n  \r\nclass CodeEditor extends Component {\r\n\r\n    /*\r\n        Cannot use raw-loader for file bellow generically by appending directory with rawloader.\r\n        Thats why we require the file on the parent component and pass down the default property to this component\r\n        to generate snippet\r\n    */ \r\n\r\n    /* eslint import/no-webpack-loader-syntax: off */\r\n\r\n    /*\r\n    var htmlModule = require('!!raw-loader!' + '../../../src/components/State');\r\n                                    OR\r\n    var htmlModule = import('!!raw-loader!../../../src/components/State').then((module) => {console.log(module.default.toString())});\r\n    */\r\n    \r\n    state = { code: this.props.codestring }\r\n  \r\n    onValueChange = code => {\r\n      this.setState({ code })\r\n    }\r\n  \r\n    highlight = code => (\r\n      <Highlight {...defaultProps} theme={theme} code={code} language=\"jsx\">\r\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n          <Fragment>\r\n            {tokens.map((line, i) => (\r\n              <div {...getLineProps({ line, key: i })}>\r\n                {line.map((token, key) => <span {...getTokenProps({ token, key })} />)}\r\n              </div>\r\n            ))}\r\n          </Fragment>\r\n        )}\r\n      </Highlight>\r\n    )\r\n  \r\n    render() {\r\n      return (\r\n        <Editor\r\n          value={this.state.code}\r\n          onValueChange={this.onValueChange}\r\n          highlight={this.highlight}\r\n          padding={10}\r\n          style={styles.root}\r\n        />\r\n      )\r\n    }\r\n  }\r\n  export default CodeEditor","import React from 'react';\r\nimport { Pre, Line, LineNo, LineContent } from \"./CodeSnippet.style\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport theme from \"prism-react-renderer/themes/nightOwl\";\r\nimport CodeEditor from './CodeEditor';\r\n\r\nfunction CodeSnippet(props) {\r\n\r\n    /*\r\n        Cannot use raw-loader for file bellow generically by appending directory with rawloader.\r\n        Thats why we require the file on the parent component and pass down the default property to this component\r\n        to generate snippet\r\n    */ \r\n\r\n    /* eslint import/no-webpack-loader-syntax: off */\r\n\r\n    /*\r\n    var htmlModule = require('!!raw-loader!' + '../../../src/components/State');\r\n                                    OR\r\n    var htmlModule = import('!!raw-loader!../../../src/components/State').then((module) => {console.log(module.default.toString())});\r\n    */\r\n\r\n    var codestring = props.codestring.trim();\r\n    var withlinenumbers = !!props.withlinenumbers;\r\n    var editor = !!props.editor;\r\n\r\n    if(!codestring) return null;\r\n\r\n    if(editor) return <CodeEditor codestring={codestring}/>;\r\n\r\n    return (withlinenumbers) ? LineNumberSnippet(codestring) : BasicSnippet(codestring);\r\n\r\n}\r\n\r\nfunction BasicSnippet(codestring) {\r\n    return (\r\n        <Highlight {...defaultProps} theme={theme} code={codestring} language=\"jsx\">\r\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                <Pre className={className} style={style}>\r\n                {tokens.map((line, i) => (\r\n                    <div {...getLineProps({ line, key: i })}>\r\n                    {line.map((token, key) => (\r\n                        <span {...getTokenProps({ token, key })} />\r\n                    ))}\r\n                    </div>\r\n                ))}\r\n                </Pre>\r\n            )}\r\n        </Highlight>\r\n    );\r\n}\r\n\r\nfunction LineNumberSnippet(codestring) {\r\n    return (\r\n        <Highlight {...defaultProps} theme={theme} code={codestring} language=\"jsx\">\r\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n            <Pre className={className} style={style}>\r\n                {tokens.map((line, i) => (\r\n                <Line key={i} {...getLineProps({ line, key: i })}>\r\n                    <LineNo>{i + 1}</LineNo>\r\n                    <LineContent>\r\n                    {line.map((token, key) => (\r\n                        <span key={key} {...getTokenProps({ token, key })} />\r\n                    ))}\r\n                    </LineContent>\r\n                </Line>\r\n                ))}\r\n            </Pre>\r\n            )}\r\n        </Highlight>\r\n    );\r\n}\r\n\r\nexport default CodeSnippet;","/* eslint import/no-webpack-loader-syntax: off */\r\nconst CodeStrings = {\r\n    components: {\r\n        Columns: require('!!raw-loader!../../../../src/components/Columns').default,\r\n        Table: require('!!raw-loader!../../../../src/components/Table').default,\r\n        State: require('!!raw-loader!../../../../src/components/State').default,\r\n        Display: require('!!raw-loader!../../../../src/components/Display').default,\r\n    },\r\n    basic_tutorials: {\r\n        ComponentFragmenting: require('!!raw-loader!../../../../src/basic-tutorials/component-fragmenting/ComponentFragmenting').default,\r\n    },\r\n};\r\n  \r\nexport default CodeStrings","import React, {useState} from 'react';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport {State, Display, Table, CodeSnippet, CodeStrings} from '../../components/index';\r\nimport './ComponentFragmenting.scss';\r\nimport {Container, Row, Col, ToggleButtonGroup, ToggleButton, Collapse} from 'react-bootstrap';\r\nimport reactElementToJSXString from 'react-element-to-jsx-string';\r\nimport jsBeautifier from 'js-beautify';\r\n\r\nfunction ComponentFragmenting() {\r\n\r\n    const TableDisplayCodeString = CodeStrings.components.Table;\r\n    const ColumnsCodeString = CodeStrings.components.Columns;\r\n\r\n    const ParentWrappingDivCode = reactElementToJSXString(ParentWrappingDiv(), {useFragmentShortSyntax: false});\r\n    const NoParentWrappingDivCode = reactElementToJSXString(NoParentWrappingDiv(), {useFragmentShortSyntax: false});\r\n    const NoParentWrappingDiv2Code = reactElementToJSXString(NoParentWrappingDiv2());\r\n    const TableDisplayRender = jsBeautifier.html(ReactDOMServer.renderToStaticMarkup(<Table/>));\r\n\r\n    console.log(ParentWrappingDivCode);\r\n\r\n    return (\r\n        <div className=\"ComponentFragmenting\">\r\n            <header className=\"ComponentFragmenting-header\">\r\n\r\n                {ChildComponentCodeReveals()}\r\n\r\n                <br></br>\r\n\r\n                <h3>Component Fragmenting</h3>\r\n                <p>Proccess in which you dictatce whether multiple components should have a parent wrapping element or not whilst still having an implicit wrapping</p>\r\n                \r\n                <Container>\r\n                    <Row className=\"ImplimentationSection\" md={2}>\r\n                        <Col>{ParentWrappingDiv()}</Col>\r\n                        <Col>\r\n                            <Container className=\"ImplimentationCodeSection\">\r\n                                <CodeSnippet codestring={ParentWrappingDivCode} withlinenumbers={true}/>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container>\r\n                    <Row className=\"ImplimentationSection\" md={2}>\r\n                        <Col>{NoParentWrappingDiv()}</Col>\r\n                        <Col>\r\n                            <Container className=\"ImplimentationCodeSection\">\r\n                                <CodeSnippet codestring={NoParentWrappingDivCode} withlinenumbers={true}/>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container>\r\n                    <Row className=\"ImplimentationSection\" md={2}>\r\n                        <Col>{NoParentWrappingDiv2()}</Col>\r\n                        <Col>\r\n                            <Container className=\"ImplimentationCodeSection\">\r\n                                <CodeSnippet codestring={NoParentWrappingDiv2Code} withlinenumbers={true}/>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <br></br>\r\n                <p>Fragments let you group a list of children without adding extra nodes to the DOM.</p>\r\n\r\n                <Container>\r\n                    <Row className=\"ImplimentationSection\" md={2}>\r\n                        <Col>\r\n                            {TableDisplay()}\r\n                            <br></br>\r\n                            <p>Which will render on the DOM as...</p>\r\n                            <CodeSnippet codestring={TableDisplayRender}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Container className=\"ImplimentationCodeSection\">\r\n                                <CodeSnippet codestring={TableDisplayCodeString} withlinenumbers={true}/>\r\n                                <CodeSnippet codestring={ColumnsCodeString} withlinenumbers={true}/>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ParentWrappingDiv() {\r\n    return(\r\n        <div className=\"ParentWrapping\">\r\n            <h3>Parent Wrapping Div</h3>\r\n            <State/>\r\n            <Display/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction NoParentWrappingDiv() {\r\n    return(\r\n        <React.Fragment>\r\n            <h3>No Parent Wrapping Div (Componnet Fragmenting)</h3>\r\n            <State/>\r\n            <Display/>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nfunction NoParentWrappingDiv2() {\r\n    return(\r\n        <>\r\n            <h3>No Parent Wrapping Div (Componnet Fragmenting) WITH JSX shortcut</h3>\r\n            <State/>\r\n            <Display/>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction TableDisplay() {\r\n    return(\r\n        <div className=\"tableChild\">\r\n            <p>\r\n                For example: You can split a Table and it's Columns into seperate components, and the columns can be fragmented together\r\n                 - such that the final rendered table will not have an uneccessary extra div wrapping the columns within the table.\r\n            </p>\r\n            <br></br>\r\n            <Table/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ChildComponentCodeReveals() {\r\n\r\n    const [showStateComponentCode, toggleStateComponentJS] = useState(false);\r\n    const [showDisplayComponentCode, toggleDisplayComponentJS] = useState(false);\r\n    const [implimentationSectionColCount, changeImplimentationSectionColCount] = useState(0);\r\n\r\n    const changeColCount = (value) => { value ? \r\n        changeImplimentationSectionColCount(implimentationSectionColCount + 1) : \r\n        changeImplimentationSectionColCount(implimentationSectionColCount - 1)\r\n    }\r\n    \r\n    const StateComponentJS = () => {\r\n        toggleStateComponentJS(!showStateComponentCode);\r\n        changeColCount(!showStateComponentCode);\r\n    };\r\n\r\n    const DisplayComponentJS = () =>  {\r\n        toggleDisplayComponentJS(!showDisplayComponentCode);\r\n        changeColCount(!showDisplayComponentCode);\r\n    };\r\n\r\n\r\n    const StateCodeString = CodeStrings.components.State;\r\n    const DisplayCodeString = CodeStrings.components.Display;\r\n\r\n    const stateCompnentString = \"<State/>\"\r\n    const displayComponentString = \"<Display/>\"\r\n\r\n    return(\r\n        <div className=\"childComponentsCode\">\r\n            <ToggleButtonGroup type=\"checkbox\" className=\"mb-2\">\r\n                <ToggleButton type=\"checkbox\" id=\"state-check\" value={1} onChange={StateComponentJS} variant=\"success\">\r\n                    {stateCompnentString}\r\n                </ToggleButton>\r\n                <ToggleButton type=\"checkbox\" id=\"display-check\" value={2} onChange={DisplayComponentJS} variant=\"warning\">\r\n                    {displayComponentString}\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n\r\n            <Container>\r\n                <Row className=\"ImplimentationSection\" md={implimentationSectionColCount}>\r\n                    <Collapse in={showStateComponentCode} unmountOnExit={true} mountOnEnter={true}>\r\n                        <Col><CodeSnippet codestring={StateCodeString} withlinenumbers={true}/></Col>\r\n                    </Collapse>\r\n                    <Collapse in={showDisplayComponentCode} unmountOnExit={true} mountOnEnter={true}>\r\n                        <Col><CodeSnippet codestring={DisplayCodeString} withlinenumbers={true}/></Col>\r\n                    </Collapse>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ComponentFragmenting;","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ComponentFragmenting from './basic-tutorials/component-fragmenting/ComponentFragmenting';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <ComponentFragmenting/>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}